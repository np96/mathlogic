package Predicate;

public class DeductionTheorem {


    static String eq(String s, String alpha) {
        return ("2 \n" +
                "(2 )-((1 )-(2 ))\n" +
                "(1 )-(2 )\n").replace("1 ", alpha).replace("2 ", s);
    }

    static String modus(String mp, String s, String alpha) {
        return ("((1 )-(2 ))-(((1 )-((2 )-(3 )))-((1 )-(3 )))\n" +
                "(((1 )-((2 )-(3 )))-((1 )-(3 )))\n" +
                "(1 )-(3 )\n").replace("1 ", alpha).replace("2 ", mp).replace("3 ", s);
    }

    static String existsRule(String a, String b, String c, String var) {
        return ("(2 )-(1 )-(2 )\n" + "(1 )-(2 )-(3 )\n"
                + "((1 )-(2 )-(3 ))-(2 )-(1 )-(2 )-(3 )\n"
                + "(2 )-(1 )-(2 )-(3 )\n"
                + "((1 )-(2 ))-((1 )-(2 )-(3 ))-(1 )-(3 )\n"
                + "(((1 )-(2 ))-((1 )-(2 )-(3 ))-(1 )-(3 ))-(2 )-((1 )-(2 ))-((1 )-(2 )-(3 ))-(1 )-(3 )\n"
                + "(2 )-((1 )-(2 ))-((1 )-(2 )-(3 ))-(1 )-(3 )\n"
                + "((2 )-(1 )-(2 ))-((2 )-((1 )-(2 ))-((1 )-(2 )-(3 ))-(1 )-(3 ))-(2 )-((1 )-(2 )-(3 ))-(1 )-(3 )\n"
                + "((2 )-((1 )-(2 ))-((1 )-(2 )-(3 ))-(1 )-(3 ))-(2 )-((1 )-(2 )-(3 ))-(1 )-(3 )\n"
                + "(2 )-((1 )-(2 )-(3 ))-(1 )-(3 )\n"
                + "((2 )-(1 )-(2 )-(3 ))-((2 )-((1 )-(2 )-(3 ))-(1 )-(3 ))-(2 )-(1 )-(3 )\n"
                + "((2 )-((1 )-(2 )-(3 ))-(1 )-(3 ))-(2 )-(1 )-(3 )\n"
                + "(2 )-(1 )-(3 )\n"
                + "?x(2 )-(1 )-(3 )\n"
                + "(1 )-?x(2 )-(1 )\n"
                + "?x(2 )-(1 )-(3 )\n"
                + "(?x(2 )-(1 )-(3 ))-(1 )-?x(2 )-(1 )-(3 )\n"
                + "(1 )-?x(2 )-(1 )-(3 )\n"
                + "(?x(2 )-(1 ))-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 )\n"
                + "((?x(2 )-(1 ))-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 ))-(1 )-(?x(2 )-(1 ))-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 )\n"
                + "(1 )-(?x(2 )-(1 ))-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 )\n"
                + "((1 )-?x(2 )-(1 ))-((1 )-(?x(2 )-(1 ))-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 ))-(1 )-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 )\n"
                + "((1 )-(?x(2 )-(1 ))-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 ))-(1 )-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 )\n"
                + "(1 )-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 )\n"
                + "((1 )-?x(2 )-(1 )-(3 ))-((1 )-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 ))-(1 )-?x(2 )-(3 )\n"
                + "((1 )-(?x(2 )-(1 )-(3 ))-?x(2 )-(3 ))-(1 )-?x(2 )-(3 )\n"
                + "(1 )-?x(2 )-(3 )\n").replace("x",var).replace("1 ", a).replace("2 ", b).replace("3 ", c);
    }

    static String allRule(String a, String b, String c, String var) {
        return ("(1 )-(2 )-(3 )\n"
                + "(1 )&(2 )-(1 )\n"
                + "(1 )&(2 )-(2 )\n"
                + "(1 )-(2 )-(3 )\n"
                + "((1 )-(2 )-(3 ))-(1 )&(2 )-(1 )-(2 )-(3 )\n"
                + "(1 )&(2 )-(1 )-(2 )-(3 )\n"
                + "((1 )&(2 )-(1 ))-((1 )&(2 )-(1 )-(2 )-(3 ))-(1 )&(2 )-(2 )-(3 )\n"
                + "((1 )&(2 )-(1 )-(2 )-(3 ))-(1 )&(2 )-(2 )-(3 )\n"
                + "(1 )&(2 )-(2 )-(3 )\n"
                + "((1 )&(2 )-(2 ))-((1 )&(2 )-(2 )-(3 ))-((1 )&(2 )-(3 ))\n"
                + "((1 )&(2 )-(2 )-(3 ))-((1 )&(2 )-(3 ))\n"
                + "(1 )&(2 )-(3 )\n"
                + "(1 )&(2 )-@x(3 )\n"
                + "(1 )-(2 )-(1 )&(2 )\n"
                + "(1 )&(2 )-@x(3 )\n"
                + "((1 )&(2 )-@x(3 ))-(1 )-(1 )&(2 )-@x(3 )\n"
                + "(1 )-(1 )&(2 )-@x(3 )\n"
                + "((1 )&(2 )-@x(3 ))-(2 )-(1 )&(2 )-@x(3 )\n"
                + "(((1 )&(2 )-@x(3 ))-(2 )-(1 )&(2 )-@x(3 ))-(1 )-((1 )&(2 )-@x(3 ))-(2 )-(1 )&(2 )-@x(3 )\n"
                + "(1 )-((1 )&(2 )-@x(3 ))-(2 )-(1 )&(2 )-@x(3 )\n"
                + "((1 )-(1 )&(2 )-@x(3 ))-((1 )-(((1 )&(2 )-@x(3 ))-(2 )-(1 )&(2 )-@x(3 )))-(1 )-(2 )-(1 )&(2 )-@x(3 )\n"
                + "((1 )-(((1 )&(2 )-@x(3 ))-(2 )-(1 )&(2 )-@x(3 )))-(1 )-(2 )-(1 )&(2 )-@x(3 )\n"
                + "(1 )-(2 )-(1 )&(2 )-@x(3 )\n"
                + "((2 )-(1 )&(2 ))-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 )\n"
                + "(((2 )-(1 )&(2 ))-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 ))-(1 )-((2 )-(1 )&(2 ))-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 )\n"
                + "(1 )-((2 )-(1 )&(2 ))-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 )\n"
                + "((1 )-(2 )-(1 )&(2 ))-((1 )-((2 )-(1 )&(2 ))-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 ))-(1 )-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 )\n"
                + "((1 )-((2 )-(1 )&(2 ))-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 ))-(1 )-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 )\n"
                + "(1 )-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 )\n"
                + "((1 )-(2 )-(1 )&(2 )-@x(3 ))-((1 )-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 ))-(1 )-(2 )-@x(3 )\n"
                + "((1 )-((2 )-(1 )&(2 )-@x(3 ))-(2 )-@x(3 ))-(1 )-(2 )-@x(3 )\n"
                + "(1 )-(2 )-@x(3 )\n").replace("x",var).replace("1 ", a).replace("2 ", b).replace("3 ", c);
    }


    static String aalpha(String a) {
        return ("(a)-((a)-(a))-(a)\n" +
                "(a)-(a)-(a)\n" +
                "((a)-((a)-(a)))-((a)-((a)-(a))-(a))-((a)-(a))\n" +
                "((a)-((a)-(a))-(a))-((a)-(a))\n" +
                "(a)-(a)\n").replace("a", a);
    }
}
